getwd()
NFIparams<- prepInputs(targetFile = "C:/Celine/github/LandRCBM_split3pools/data/all_prop_models_bc_tb.csv",
fun = "data.table::fread",
destinationPath = dPath,
#purge = 7,
filename2 = "all_prop_models_bc_tb.csv")
Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
rlib <- file.path("R", Rversion)
# options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@development")
Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
rlib <- file.path("R", Rversion)
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
install.packages("remotes")
remotes::install_github("PredictiveEcology/Require@f2c791eb05fb0ad99b278619198ef925f85cbb9d")
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
rlib <- file.path("R", Rversion)
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
install.packages("C:/Celine/github/remotes_2.4.2.tar.gz", repos = NULL, type = "source")
remotes::install_github("PredictiveEcology/Require@f2c791eb05fb0ad99b278619198ef925f85cbb9d")
library(Require)
install.packages("data.table")
install.packages("data.table")
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
options(repos = c(CRAN = "https://mirror.rcg.sfu.ca/mirror/CRAN/"))
install.packages("remotes")
download.file("https://cran.r-project.org/CRAN_mirrors.csv", destfile = tempfile())
install.packages("remotes")
install.packages("data.table")
install.packages("remotes")
remotes::install_github("PredictiveEcology/Require@f2c791eb05fb0ad99b278619198ef925f85cbb9d")
#Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
#rlib <- file.path("R", Rversion)
rlib <- file.path(tools::R_user_dir(basename(prjDir), "data"), "packages",
version$platform, getRversion()[,1:2])
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
#Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
#rlib <- file.path("R", Rversion)
rlib <- file.path(tools::R_user_dir(basename(prjDir), "data"), "packages",
version$platform, getRversion()[,1:2])
#Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
#rlib <- file.path("R", Rversion)
rlib <- file.path(tools::R_user_dir(basename(prjDir), "data"), "packages",
version$platform, getRversion()[,1:2])
getwd()
#Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
#rlib <- file.path("R", Rversion)
rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[,1:2])
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@f2c791eb05fb0ad99b278619198ef925f85cbb9d")
library(Require)
Require(c("PredictiveEcology/SpaDES.project@transition"), require = FALSE)
Require(c("SpaDES", "reproducible"), upgrade = FALSE, install = TRUE)
remotes::install_github("PredictiveEcology/SpaDES.project@transition")
Require(c("SpaDES", "reproducible"), upgrade = FALSE, install = TRUE)
### Not sure  if I need the next line - ran it anyway
Require(c("SpaDES.core (>=1.1.0)", "SpaDES.tools (>= 1.0.0)",
"googledrive", 'RCurl', 'XML', "PredictiveEcology/CBMutils@development",
"data.table"), # comes up with an error so added "devtools'
#require = "SpaDES.core", # call `require` only on this package (same as `library`)
verbose = 1)
### Not sure  if I need the next line - ran it anyway
Require(c("SpaDES.core (>=1.1.0)", "SpaDES.tools (>= 1.0.0)",
"googledrive", 'RCurl', 'XML', #"PredictiveEcology/CBMutils@development",
"data.table"), # comes up with an error so added "devtools'
#require = "SpaDES.core", # call `require` only on this package (same as `library`)
verbose = 1)
load_all("C:/Celine/github/CBMutils")
options("download.file.method" = "libcurl")
download.file("https://cran.r-project.org/CRAN_mirrors.csv", destfile = tempfile())
options("download.file.method" = "curl")
download.file("https://cran.r-project.org/CRAN_mirrors.csv", destfile = tempfile())
options("download.file.method" = "wget")
download.file("https://cran.r-project.org/CRAN_mirrors.csv", destfile = tempfile())
options("download.file.method" = "internal")
download.file("https://cran.r-project.org/CRAN_mirrors.csv", destfile = tempfile())
options("download.file.method" = "wininet")
download.file("https://cran.r-project.org/CRAN_mirrors.csv", destfile = tempfile())
rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[,1:2])
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
if (!require("remotes")) {
install.packages("remotes")
}
install.packages("remotes")
getOption("repos")
options("download.file.method" = "wininet")
rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[,1:2])
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
install.packages("remotes")
install.packages("remotes")
rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[,1:2])
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
options("download.file.method" = "wininet")
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
install.packages("remotes")
install.packages("remotes")
remotes::install_github("PredictiveEcology/Require@f2c791eb05fb0ad99b278619198ef925f85cbb9d")
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
Require(c("PredictiveEcology/SpaDES.project@transition"), require = FALSE)
rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[,1:2])
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
Require(c("PredictiveEcology/SpaDES.project@transition"), require = FALSE)
rlib
pkgDir <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[, 1:2])
dir.create(pkgDir, recursive = TRUE, showWarnings = FALSE)
.libPaths(pkgDir, include.site = FALSE)
install.packages("remotes")
install.packages("remotes")
pkgDir <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[, 1:2])
dir.create(pkgDir, recursive = TRUE, showWarnings = FALSE)
.libPaths(pkgDir, include.site = FALSE)
install.packages("remotes")
install.packages("remotes")
pkgDir <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[, 1:2])
dir.create(pkgDir, recursive = TRUE, showWarnings = FALSE)
.libPaths(pkgDir, include.site = FALSE)
# rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
#                     version$platform, getRversion()[,1:2])
# options(repos = c(CRAN = "https://cloud.r-project.org"))
# if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
## this is a work-around for working from PFC...R cannot connect to URL
options("download.file.method" = "wininet")
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
library(Require)
detach("package:Require", unload = TRUE)
remove.packages("Require")
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
Require(c("PredictiveEcology/SpaDES.project@transition"), require = FALSE)
remove.packages("SpaDES.project")
library(Require)
remove.packages("Require")
library(Require)
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
packageVersion("Require")
libPaths
.libPaths()
pkgDir <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[, 1:2])
dir.create(pkgDir, recursive = TRUE, showWarnings = FALSE)
.libPaths(pkgDir, include.site = FALSE)
options("download.file.method" = "wininet")
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
## install/load required packages
#Rversion <- gsub(".+(4..).+", "\\1", R.version.string)
#rlib <- file.path("R", Rversion)
pkgDir <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[, 1:2])
dir.create(pkgDir, recursive = TRUE, showWarnings = FALSE)
.libPaths(pkgDir, include.site = FALSE)
# rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
#                     version$platform, getRversion()[,1:2])
# options(repos = c(CRAN = "https://cloud.r-project.org"))
# if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
## this is a work-around for working from PFC...R cannot connect to URL
options("download.file.method" = "wininet")
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@development")
loadedNamespaces()
loadedNamespaces()
loadedNamespaces()
loadedNamespaces()
loadedNamespaces()
loadedNamespaces()
loadedNamespaces()
loadedNamespaces()
pkgDir <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
version$platform, getRversion()[, 1:2])
dir.create(pkgDir, recursive = TRUE, showWarnings = FALSE)
.libPaths(pkgDir, include.site = FALSE)
# rlib <- file.path(tools::R_user_dir(basename(getwd()), "data"), "packages",
#                     version$platform, getRversion()[,1:2])
# options(repos = c(CRAN = "https://cloud.r-project.org"))
# if (!dir.exists(rlib)) dir.create(rlib, recursive = TRUE); .libPaths(rlib, include.site = FALSE)
## this is a work-around for working from PFC...R cannot connect to URL
options("download.file.method" = "wininet")
### In this section, only load the minimum of packages (Require, SpaDES.install) so all packages can be installed with
#    correct version numbering. If we load a package too early and it is an older version that what may be required by
#    a module, then we get an inconsistency
if (!require("remotes")) {
install.packages("remotes")
}
remotes::install_github("PredictiveEcology/Require@development")
library(Require)
loadedNamespaces()
